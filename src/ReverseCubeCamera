import * as THREE from 'three'


const cameraDistance = 20;

class ReverseCubeCamera extends THREE.CubeCamera {

    constructor( near, far, resolution ) {
        super( near, far, resolution )
    }

    updateCoordinateSystem() {

		const coordinateSystem = this.coordinateSystem;

		const cameras = this.children.concat();
		const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;
		for ( const camera of cameras ) this.remove( camera );

		if ( coordinateSystem === THREE.WebGLCoordinateSystem ) {

			cameraPX.up.set( 0, 1, 0 );
			cameraPX.lookAt( 1, 0, 0 );
            cameraPX.position.set( -cameraDistance, 0, 0 );

			cameraNX.up.set( 0, 1, 0 );
			cameraNX.lookAt( - 1, 0, 0 );
            cameraNX.position.set( cameraDistance, 0, 0 );

			cameraPY.up.set( 0, 0, - 1 );
			cameraPY.lookAt( 0, 1, 0 );
            cameraPY.position.set( 0, -cameraDistance, 0 );

			cameraNY.up.set( 0, 0, 1 );
			cameraNY.lookAt( 0, - 1, 0 );
            cameraNY.position.set( 0, cameraDistance, 0 );

			cameraPZ.up.set( 0, 1, 0 );
			cameraPZ.lookAt( 0, 0, 1 );
            cameraPZ.position.set( 0, 0, -cameraDistance );

			cameraNZ.up.set( 0, 1, 0 );
			cameraNZ.lookAt( 0, 0, - 1 );
            cameraNZ.position.set( 0, 0, cameraDistance );

		} else if ( coordinateSystem === THREE.WebGPUCoordinateSystem ) {

			cameraPX.up.set( 0, - 1, 0 );
			cameraPX.lookAt( - 1, 0, 0 );
            cameraPX.position.set( cameraDistance, 0, 0 );

			cameraNX.up.set( 0, - 1, 0 );
			cameraNX.lookAt( 1, 0, 0 );
            cameraNX.position.set( -cameraDistance, 0, 0 );

			cameraPY.up.set( 0, 0, 1 );
			cameraPY.lookAt( 0, 1, 0 );
            cameraPY.position.set( 0, -cameraDistance, 0 );

			cameraNY.up.set( 0, 0, - 1 );
			cameraNY.lookAt( 0, - 1, 0 );
            cameraNY.position.set( 0, cameraDistance, 0 );

			cameraPZ.up.set( 0, - 1, 0 );
			cameraPZ.lookAt( 0, 0, 1 );
            cameraPZ.position.set( 0, 0, -cameraDistance );

			cameraNZ.up.set( 0, - 1, 0 );
			cameraNZ.lookAt( 0, 0, - 1 );
            cameraNZ.position.set( 0, 0, cameraDistance );

		} else {
			throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );
		}

		for ( const camera of cameras ) {
			this.add( camera );
			camera.updateMatrixWorld();
		}
    }
}

export { ReverseCubeCamera };